ARM GAS  /tmp/ccfBRp2i.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"system_stm32l1xx.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.SystemInit,"ax",%progbits
  16              		.align	1
  17              		.global	SystemInit
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	SystemInit:
  24              	.LFB72:
  25              		.file 1 "Core/Src/system_stm32l1xx.c"
   1:Core/Src/system_stm32l1xx.c **** /**
   2:Core/Src/system_stm32l1xx.c ****   ******************************************************************************
   3:Core/Src/system_stm32l1xx.c ****   * @file    system_stm32l1xx.c
   4:Core/Src/system_stm32l1xx.c ****   * @author  MCD Application Team
   5:Core/Src/system_stm32l1xx.c ****   * @brief   CMSIS Cortex-M3 Device Peripheral Access Layer System Source File.
   6:Core/Src/system_stm32l1xx.c ****   *             
   7:Core/Src/system_stm32l1xx.c ****   *   This file provides two functions and one global variable to be called from 
   8:Core/Src/system_stm32l1xx.c ****   *   user application:
   9:Core/Src/system_stm32l1xx.c ****   *      - SystemInit(): This function is called at startup just after reset and 
  10:Core/Src/system_stm32l1xx.c ****   *                      before branch to main program. This call is made inside
  11:Core/Src/system_stm32l1xx.c ****   *                      the "startup_stm32l1xx.s" file.
  12:Core/Src/system_stm32l1xx.c ****   *                        
  13:Core/Src/system_stm32l1xx.c ****   *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
  14:Core/Src/system_stm32l1xx.c ****   *                                  by the user application to setup the SysTick 
  15:Core/Src/system_stm32l1xx.c ****   *                                  timer or configure other parameters.
  16:Core/Src/system_stm32l1xx.c ****   *                                     
  17:Core/Src/system_stm32l1xx.c ****   *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
  18:Core/Src/system_stm32l1xx.c ****   *                                 be called whenever the core clock is changed
  19:Core/Src/system_stm32l1xx.c ****   *                                 during program execution.   
  20:Core/Src/system_stm32l1xx.c ****   *      
  21:Core/Src/system_stm32l1xx.c ****   ******************************************************************************
  22:Core/Src/system_stm32l1xx.c ****   * @attention
  23:Core/Src/system_stm32l1xx.c ****   *
  24:Core/Src/system_stm32l1xx.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  25:Core/Src/system_stm32l1xx.c ****   * All rights reserved.</center></h2>
  26:Core/Src/system_stm32l1xx.c ****   *
  27:Core/Src/system_stm32l1xx.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  28:Core/Src/system_stm32l1xx.c ****   * the "License"; You may not use this file except in compliance with the
  29:Core/Src/system_stm32l1xx.c ****   * License. You may obtain a copy of the License at:
  30:Core/Src/system_stm32l1xx.c ****   *                        opensource.org/licenses/BSD-3-Clause
  31:Core/Src/system_stm32l1xx.c ****   *
  32:Core/Src/system_stm32l1xx.c ****   ******************************************************************************
  33:Core/Src/system_stm32l1xx.c ****   */
ARM GAS  /tmp/ccfBRp2i.s 			page 2


  34:Core/Src/system_stm32l1xx.c **** 
  35:Core/Src/system_stm32l1xx.c **** /** @addtogroup CMSIS
  36:Core/Src/system_stm32l1xx.c ****   * @{
  37:Core/Src/system_stm32l1xx.c ****   */
  38:Core/Src/system_stm32l1xx.c **** 
  39:Core/Src/system_stm32l1xx.c **** /** @addtogroup stm32l1xx_system
  40:Core/Src/system_stm32l1xx.c ****   * @{
  41:Core/Src/system_stm32l1xx.c ****   */  
  42:Core/Src/system_stm32l1xx.c ****   
  43:Core/Src/system_stm32l1xx.c **** /** @addtogroup STM32L1xx_System_Private_Includes
  44:Core/Src/system_stm32l1xx.c ****   * @{
  45:Core/Src/system_stm32l1xx.c ****   */
  46:Core/Src/system_stm32l1xx.c **** 
  47:Core/Src/system_stm32l1xx.c **** #include "stm32l1xx.h"
  48:Core/Src/system_stm32l1xx.c **** 
  49:Core/Src/system_stm32l1xx.c **** /**
  50:Core/Src/system_stm32l1xx.c ****   * @}
  51:Core/Src/system_stm32l1xx.c ****   */
  52:Core/Src/system_stm32l1xx.c **** 
  53:Core/Src/system_stm32l1xx.c **** /** @addtogroup STM32L1xx_System_Private_TypesDefinitions
  54:Core/Src/system_stm32l1xx.c ****   * @{
  55:Core/Src/system_stm32l1xx.c ****   */
  56:Core/Src/system_stm32l1xx.c **** 
  57:Core/Src/system_stm32l1xx.c **** /**
  58:Core/Src/system_stm32l1xx.c ****   * @}
  59:Core/Src/system_stm32l1xx.c ****   */
  60:Core/Src/system_stm32l1xx.c **** 
  61:Core/Src/system_stm32l1xx.c **** /** @addtogroup STM32L1xx_System_Private_Defines
  62:Core/Src/system_stm32l1xx.c ****   * @{
  63:Core/Src/system_stm32l1xx.c ****   */
  64:Core/Src/system_stm32l1xx.c **** #if !defined  (HSE_VALUE) 
  65:Core/Src/system_stm32l1xx.c ****   #define HSE_VALUE    ((uint32_t)8000000U) /*!< Default value of the External oscillator in Hz.
  66:Core/Src/system_stm32l1xx.c ****                                                 This value can be provided and adapted by the user 
  67:Core/Src/system_stm32l1xx.c **** #endif /* HSE_VALUE */
  68:Core/Src/system_stm32l1xx.c **** 
  69:Core/Src/system_stm32l1xx.c **** #if !defined  (HSI_VALUE)
  70:Core/Src/system_stm32l1xx.c ****   #define HSI_VALUE    ((uint32_t)8000000U) /*!< Default value of the Internal oscillator in Hz.
  71:Core/Src/system_stm32l1xx.c ****                                                 This value can be provided and adapted by the user 
  72:Core/Src/system_stm32l1xx.c **** #endif /* HSI_VALUE */
  73:Core/Src/system_stm32l1xx.c **** 
  74:Core/Src/system_stm32l1xx.c **** /*!< Uncomment the following line if you need to use external SRAM mounted
  75:Core/Src/system_stm32l1xx.c ****      on STM32L152D_EVAL board as data memory  */
  76:Core/Src/system_stm32l1xx.c **** /* #define DATA_IN_ExtSRAM */
  77:Core/Src/system_stm32l1xx.c ****   
  78:Core/Src/system_stm32l1xx.c **** /* Note: Following vector table addresses must be defined in line with linker
  79:Core/Src/system_stm32l1xx.c ****          configuration. */
  80:Core/Src/system_stm32l1xx.c **** /*!< Uncomment the following line if you need to relocate the vector table
  81:Core/Src/system_stm32l1xx.c ****      anywhere in Flash or Sram, else the vector table is kept at the automatic
  82:Core/Src/system_stm32l1xx.c ****      remap of boot address selected */
  83:Core/Src/system_stm32l1xx.c **** /* #define USER_VECT_TAB_ADDRESS */
  84:Core/Src/system_stm32l1xx.c **** 
  85:Core/Src/system_stm32l1xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
  86:Core/Src/system_stm32l1xx.c **** /*!< Uncomment the following line if you need to relocate your vector Table
  87:Core/Src/system_stm32l1xx.c ****      in Sram else user remap will be done in Flash. */
  88:Core/Src/system_stm32l1xx.c **** /* #define VECT_TAB_SRAM */
  89:Core/Src/system_stm32l1xx.c **** #if defined(VECT_TAB_SRAM)
  90:Core/Src/system_stm32l1xx.c **** #define VECT_TAB_BASE_ADDRESS   SRAM_BASE       /*!< Vector Table base address field.
ARM GAS  /tmp/ccfBRp2i.s 			page 3


  91:Core/Src/system_stm32l1xx.c ****                                                      This value must be a multiple of 0x200. */
  92:Core/Src/system_stm32l1xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table base offset field.
  93:Core/Src/system_stm32l1xx.c ****                                                      This value must be a multiple of 0x200. */
  94:Core/Src/system_stm32l1xx.c **** #else
  95:Core/Src/system_stm32l1xx.c **** #define VECT_TAB_BASE_ADDRESS   FLASH_BASE      /*!< Vector Table base address field.
  96:Core/Src/system_stm32l1xx.c ****                                                      This value must be a multiple of 0x200. */
  97:Core/Src/system_stm32l1xx.c **** #define VECT_TAB_OFFSET         0x00000000U     /*!< Vector Table base offset field.
  98:Core/Src/system_stm32l1xx.c ****                                                      This value must be a multiple of 0x200. */
  99:Core/Src/system_stm32l1xx.c **** #endif /* VECT_TAB_SRAM */
 100:Core/Src/system_stm32l1xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
 101:Core/Src/system_stm32l1xx.c **** 
 102:Core/Src/system_stm32l1xx.c **** /******************************************************************************/
 103:Core/Src/system_stm32l1xx.c **** /**
 104:Core/Src/system_stm32l1xx.c ****   * @}
 105:Core/Src/system_stm32l1xx.c ****   */
 106:Core/Src/system_stm32l1xx.c **** 
 107:Core/Src/system_stm32l1xx.c **** /** @addtogroup STM32L1xx_System_Private_Macros
 108:Core/Src/system_stm32l1xx.c ****   * @{
 109:Core/Src/system_stm32l1xx.c ****   */
 110:Core/Src/system_stm32l1xx.c **** 
 111:Core/Src/system_stm32l1xx.c **** /**
 112:Core/Src/system_stm32l1xx.c ****   * @}
 113:Core/Src/system_stm32l1xx.c ****   */
 114:Core/Src/system_stm32l1xx.c **** 
 115:Core/Src/system_stm32l1xx.c **** /** @addtogroup STM32L1xx_System_Private_Variables
 116:Core/Src/system_stm32l1xx.c ****   * @{
 117:Core/Src/system_stm32l1xx.c ****   */
 118:Core/Src/system_stm32l1xx.c ****   /* This variable is updated in three ways:
 119:Core/Src/system_stm32l1xx.c ****       1) by calling CMSIS function SystemCoreClockUpdate()
 120:Core/Src/system_stm32l1xx.c ****       2) by calling HAL API function HAL_RCC_GetHCLKFreq()
 121:Core/Src/system_stm32l1xx.c ****       3) each time HAL_RCC_ClockConfig() is called to configure the system clock frequency
 122:Core/Src/system_stm32l1xx.c ****          Note: If you use this function to configure the system clock; then there
 123:Core/Src/system_stm32l1xx.c ****                is no need to call the 2 first functions listed above, since SystemCoreClock
 124:Core/Src/system_stm32l1xx.c ****                variable is updated automatically.
 125:Core/Src/system_stm32l1xx.c ****   */
 126:Core/Src/system_stm32l1xx.c **** uint32_t SystemCoreClock        = 2097000U;
 127:Core/Src/system_stm32l1xx.c **** const uint8_t PLLMulTable[9]    = {3U, 4U, 6U, 8U, 12U, 16U, 24U, 32U, 48U};
 128:Core/Src/system_stm32l1xx.c **** const uint8_t AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
 129:Core/Src/system_stm32l1xx.c **** const uint8_t APBPrescTable[8]  = {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
 130:Core/Src/system_stm32l1xx.c **** 
 131:Core/Src/system_stm32l1xx.c **** /**
 132:Core/Src/system_stm32l1xx.c ****   * @}
 133:Core/Src/system_stm32l1xx.c ****   */
 134:Core/Src/system_stm32l1xx.c **** 
 135:Core/Src/system_stm32l1xx.c **** /** @addtogroup STM32L1xx_System_Private_FunctionPrototypes
 136:Core/Src/system_stm32l1xx.c ****   * @{
 137:Core/Src/system_stm32l1xx.c ****   */
 138:Core/Src/system_stm32l1xx.c **** 
 139:Core/Src/system_stm32l1xx.c **** #if defined (STM32L151xD) || defined (STM32L152xD) || defined (STM32L162xD)
 140:Core/Src/system_stm32l1xx.c **** #ifdef DATA_IN_ExtSRAM
 141:Core/Src/system_stm32l1xx.c ****   static void SystemInit_ExtMemCtl(void); 
 142:Core/Src/system_stm32l1xx.c **** #endif /* DATA_IN_ExtSRAM */
 143:Core/Src/system_stm32l1xx.c **** #endif /* STM32L151xD || STM32L152xD || STM32L162xD */
 144:Core/Src/system_stm32l1xx.c **** 
 145:Core/Src/system_stm32l1xx.c **** /**
 146:Core/Src/system_stm32l1xx.c ****   * @}
 147:Core/Src/system_stm32l1xx.c ****   */
ARM GAS  /tmp/ccfBRp2i.s 			page 4


 148:Core/Src/system_stm32l1xx.c **** 
 149:Core/Src/system_stm32l1xx.c **** /** @addtogroup STM32L1xx_System_Private_Functions
 150:Core/Src/system_stm32l1xx.c ****   * @{
 151:Core/Src/system_stm32l1xx.c ****   */
 152:Core/Src/system_stm32l1xx.c **** 
 153:Core/Src/system_stm32l1xx.c **** /**
 154:Core/Src/system_stm32l1xx.c ****   * @brief  Setup the microcontroller system.
 155:Core/Src/system_stm32l1xx.c ****   *         Initialize the Embedded Flash Interface, the PLL and update the 
 156:Core/Src/system_stm32l1xx.c ****   *         SystemCoreClock variable.
 157:Core/Src/system_stm32l1xx.c ****   * @param  None
 158:Core/Src/system_stm32l1xx.c ****   * @retval None
 159:Core/Src/system_stm32l1xx.c ****   */
 160:Core/Src/system_stm32l1xx.c **** void SystemInit (void)
 161:Core/Src/system_stm32l1xx.c **** {
  26              		.loc 1 161 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31 0000 7047     		bx	lr
  32              		.cfi_endproc
  33              	.LFE72:
  35              		.section	.text.SystemCoreClockUpdate,"ax",%progbits
  36              		.align	1
  37              		.global	SystemCoreClockUpdate
  38              		.syntax unified
  39              		.thumb
  40              		.thumb_func
  41              		.fpu softvfp
  43              	SystemCoreClockUpdate:
  44              	.LFB73:
 162:Core/Src/system_stm32l1xx.c **** #ifdef DATA_IN_ExtSRAM
 163:Core/Src/system_stm32l1xx.c ****   SystemInit_ExtMemCtl(); 
 164:Core/Src/system_stm32l1xx.c **** #endif /* DATA_IN_ExtSRAM */
 165:Core/Src/system_stm32l1xx.c ****     
 166:Core/Src/system_stm32l1xx.c ****   /* Configure the Vector Table location -------------------------------------*/
 167:Core/Src/system_stm32l1xx.c **** #if defined(USER_VECT_TAB_ADDRESS)
 168:Core/Src/system_stm32l1xx.c ****   SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM.
 169:Core/Src/system_stm32l1xx.c **** #endif /* USER_VECT_TAB_ADDRESS */
 170:Core/Src/system_stm32l1xx.c **** }
 171:Core/Src/system_stm32l1xx.c **** 
 172:Core/Src/system_stm32l1xx.c **** /**
 173:Core/Src/system_stm32l1xx.c ****   * @brief  Update SystemCoreClock according to Clock Register Values
 174:Core/Src/system_stm32l1xx.c ****   *         The SystemCoreClock variable contains the core clock (HCLK), it can
 175:Core/Src/system_stm32l1xx.c ****   *         be used by the user application to setup the SysTick timer or configure
 176:Core/Src/system_stm32l1xx.c ****   *         other parameters.
 177:Core/Src/system_stm32l1xx.c ****   *           
 178:Core/Src/system_stm32l1xx.c ****   * @note   Each time the core clock (HCLK) changes, this function must be called
 179:Core/Src/system_stm32l1xx.c ****   *         to update SystemCoreClock variable value. Otherwise, any configuration
 180:Core/Src/system_stm32l1xx.c ****   *         based on this variable will be incorrect.         
 181:Core/Src/system_stm32l1xx.c ****   *     
 182:Core/Src/system_stm32l1xx.c ****   * @note   - The system frequency computed by this function is not the real 
 183:Core/Src/system_stm32l1xx.c ****   *           frequency in the chip. It is calculated based on the predefined 
 184:Core/Src/system_stm32l1xx.c ****   *           constant and the selected clock source:
 185:Core/Src/system_stm32l1xx.c ****   *             
 186:Core/Src/system_stm32l1xx.c ****   *           - If SYSCLK source is MSI, SystemCoreClock will contain the MSI 
 187:Core/Src/system_stm32l1xx.c ****   *             value as defined by the MSI range.
ARM GAS  /tmp/ccfBRp2i.s 			page 5


 188:Core/Src/system_stm32l1xx.c ****   *                                   
 189:Core/Src/system_stm32l1xx.c ****   *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
 190:Core/Src/system_stm32l1xx.c ****   *                                              
 191:Core/Src/system_stm32l1xx.c ****   *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
 192:Core/Src/system_stm32l1xx.c ****   *                          
 193:Core/Src/system_stm32l1xx.c ****   *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
 194:Core/Src/system_stm32l1xx.c ****   *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
 195:Core/Src/system_stm32l1xx.c ****   *         
 196:Core/Src/system_stm32l1xx.c ****   *         (*) HSI_VALUE is a constant defined in stm32l1xx.h file (default value
 197:Core/Src/system_stm32l1xx.c ****   *             16 MHz) but the real value may vary depending on the variations
 198:Core/Src/system_stm32l1xx.c ****   *             in voltage and temperature.   
 199:Core/Src/system_stm32l1xx.c ****   *    
 200:Core/Src/system_stm32l1xx.c ****   *         (**) HSE_VALUE is a constant defined in stm32l1xx.h file (default value
 201:Core/Src/system_stm32l1xx.c ****   *              8 MHz), user has to ensure that HSE_VALUE is same as the real
 202:Core/Src/system_stm32l1xx.c ****   *              frequency of the crystal used. Otherwise, this function may
 203:Core/Src/system_stm32l1xx.c ****   *              have wrong result.
 204:Core/Src/system_stm32l1xx.c ****   *                
 205:Core/Src/system_stm32l1xx.c ****   *         - The result of this function could be not correct when using fractional
 206:Core/Src/system_stm32l1xx.c ****   *           value for HSE crystal.
 207:Core/Src/system_stm32l1xx.c ****   * @param  None
 208:Core/Src/system_stm32l1xx.c ****   * @retval None
 209:Core/Src/system_stm32l1xx.c ****   */
 210:Core/Src/system_stm32l1xx.c **** void SystemCoreClockUpdate (void)
 211:Core/Src/system_stm32l1xx.c **** {
  45              		.loc 1 211 0
  46              		.cfi_startproc
  47              		@ args = 0, pretend = 0, frame = 0
  48              		@ frame_needed = 0, uses_anonymous_args = 0
  49              		@ link register save eliminated.
  50              	.LVL0:
 212:Core/Src/system_stm32l1xx.c ****   uint32_t tmp = 0, pllmul = 0, plldiv = 0, pllsource = 0, msirange = 0;
 213:Core/Src/system_stm32l1xx.c **** 
 214:Core/Src/system_stm32l1xx.c ****   /* Get SYSCLK source -------------------------------------------------------*/
 215:Core/Src/system_stm32l1xx.c ****   tmp = RCC->CFGR & RCC_CFGR_SWS;
  51              		.loc 1 215 0
  52 0000 2B4B     		ldr	r3, .L11
  53 0002 9B68     		ldr	r3, [r3, #8]
  54 0004 03F00C03 		and	r3, r3, #12
  55              	.LVL1:
 216:Core/Src/system_stm32l1xx.c ****   
 217:Core/Src/system_stm32l1xx.c ****   switch (tmp)
  56              		.loc 1 217 0
  57 0008 0C2B     		cmp	r3, #12
  58 000a 44D8     		bhi	.L3
  59 000c DFE803F0 		tbb	[pc, r3]
  60              	.L5:
  61 0010 07       		.byte	(.L4-.L5)/2
  62 0011 43       		.byte	(.L3-.L5)/2
  63 0012 43       		.byte	(.L3-.L5)/2
  64 0013 43       		.byte	(.L3-.L5)/2
  65 0014 1D       		.byte	(.L6-.L5)/2
  66 0015 43       		.byte	(.L3-.L5)/2
  67 0016 43       		.byte	(.L3-.L5)/2
  68 0017 43       		.byte	(.L3-.L5)/2
  69 0018 21       		.byte	(.L7-.L5)/2
  70 0019 43       		.byte	(.L3-.L5)/2
  71 001a 43       		.byte	(.L3-.L5)/2
ARM GAS  /tmp/ccfBRp2i.s 			page 6


  72 001b 43       		.byte	(.L3-.L5)/2
  73 001c 25       		.byte	(.L8-.L5)/2
  74 001d 00       		.p2align 1
  75              	.L4:
 218:Core/Src/system_stm32l1xx.c ****   {
 219:Core/Src/system_stm32l1xx.c ****     case 0x00:  /* MSI used as system clock */
 220:Core/Src/system_stm32l1xx.c ****       msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
  76              		.loc 1 220 0
  77 001e 244B     		ldr	r3, .L11
  78              	.LVL2:
  79 0020 5B68     		ldr	r3, [r3, #4]
  80 0022 C3F34233 		ubfx	r3, r3, #13, #3
  81              	.LVL3:
 221:Core/Src/system_stm32l1xx.c ****       SystemCoreClock = (32768 * (1 << (msirange + 1)));
  82              		.loc 1 221 0
  83 0026 0133     		adds	r3, r3, #1
  84              	.LVL4:
  85 0028 4FF40042 		mov	r2, #32768
  86 002c 02FA03F3 		lsl	r3, r2, r3
  87              	.LVL5:
  88 0030 204A     		ldr	r2, .L11+4
  89 0032 1360     		str	r3, [r2]
  90              	.LVL6:
  91              	.L9:
 222:Core/Src/system_stm32l1xx.c ****       break;
 223:Core/Src/system_stm32l1xx.c ****     case 0x04:  /* HSI used as system clock */
 224:Core/Src/system_stm32l1xx.c ****       SystemCoreClock = HSI_VALUE;
 225:Core/Src/system_stm32l1xx.c ****       break;
 226:Core/Src/system_stm32l1xx.c ****     case 0x08:  /* HSE used as system clock */
 227:Core/Src/system_stm32l1xx.c ****       SystemCoreClock = HSE_VALUE;
 228:Core/Src/system_stm32l1xx.c ****       break;
 229:Core/Src/system_stm32l1xx.c ****     case 0x0C:  /* PLL used as system clock */
 230:Core/Src/system_stm32l1xx.c ****       /* Get PLL clock source and multiplication factor ----------------------*/
 231:Core/Src/system_stm32l1xx.c ****       pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 232:Core/Src/system_stm32l1xx.c ****       plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 233:Core/Src/system_stm32l1xx.c ****       pllmul = PLLMulTable[(pllmul >> 18)];
 234:Core/Src/system_stm32l1xx.c ****       plldiv = (plldiv >> 22) + 1;
 235:Core/Src/system_stm32l1xx.c ****       
 236:Core/Src/system_stm32l1xx.c ****       pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 237:Core/Src/system_stm32l1xx.c **** 
 238:Core/Src/system_stm32l1xx.c ****       if (pllsource == 0x00)
 239:Core/Src/system_stm32l1xx.c ****       {
 240:Core/Src/system_stm32l1xx.c ****         /* HSI oscillator clock selected as PLL clock entry */
 241:Core/Src/system_stm32l1xx.c ****         SystemCoreClock = (((HSI_VALUE) * pllmul) / plldiv);
 242:Core/Src/system_stm32l1xx.c ****       }
 243:Core/Src/system_stm32l1xx.c ****       else
 244:Core/Src/system_stm32l1xx.c ****       {
 245:Core/Src/system_stm32l1xx.c ****         /* HSE selected as PLL clock entry */
 246:Core/Src/system_stm32l1xx.c ****         SystemCoreClock = (((HSE_VALUE) * pllmul) / plldiv);
 247:Core/Src/system_stm32l1xx.c ****       }
 248:Core/Src/system_stm32l1xx.c ****       break;
 249:Core/Src/system_stm32l1xx.c ****     default: /* MSI used as system clock */
 250:Core/Src/system_stm32l1xx.c ****       msirange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE) >> 13;
 251:Core/Src/system_stm32l1xx.c ****       SystemCoreClock = (32768 * (1 << (msirange + 1)));
 252:Core/Src/system_stm32l1xx.c ****       break;
 253:Core/Src/system_stm32l1xx.c ****   }
 254:Core/Src/system_stm32l1xx.c ****   /* Compute HCLK clock frequency --------------------------------------------*/
ARM GAS  /tmp/ccfBRp2i.s 			page 7


 255:Core/Src/system_stm32l1xx.c ****   /* Get HCLK prescaler */
 256:Core/Src/system_stm32l1xx.c ****   tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
  92              		.loc 1 256 0
  93 0034 1E4B     		ldr	r3, .L11
  94 0036 9B68     		ldr	r3, [r3, #8]
  95 0038 C3F30313 		ubfx	r3, r3, #4, #4
  96 003c 1E4A     		ldr	r2, .L11+8
  97 003e D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
  98              	.LVL7:
 257:Core/Src/system_stm32l1xx.c ****   /* HCLK clock frequency */
 258:Core/Src/system_stm32l1xx.c ****   SystemCoreClock >>= tmp;
  99              		.loc 1 258 0
 100 0040 1C4A     		ldr	r2, .L11+4
 101 0042 1368     		ldr	r3, [r2]
 102 0044 CB40     		lsrs	r3, r3, r1
 103 0046 1360     		str	r3, [r2]
 104 0048 7047     		bx	lr
 105              	.LVL8:
 106              	.L6:
 224:Core/Src/system_stm32l1xx.c ****       break;
 107              		.loc 1 224 0
 108 004a 1C4A     		ldr	r2, .L11+12
 109 004c 194B     		ldr	r3, .L11+4
 110              	.LVL9:
 111 004e 1A60     		str	r2, [r3]
 225:Core/Src/system_stm32l1xx.c ****     case 0x08:  /* HSE used as system clock */
 112              		.loc 1 225 0
 113 0050 F0E7     		b	.L9
 114              	.LVL10:
 115              	.L7:
 227:Core/Src/system_stm32l1xx.c ****       break;
 116              		.loc 1 227 0
 117 0052 1B4A     		ldr	r2, .L11+16
 118 0054 174B     		ldr	r3, .L11+4
 119              	.LVL11:
 120 0056 1A60     		str	r2, [r3]
 228:Core/Src/system_stm32l1xx.c ****     case 0x0C:  /* PLL used as system clock */
 121              		.loc 1 228 0
 122 0058 ECE7     		b	.L9
 123              	.LVL12:
 124              	.L8:
 231:Core/Src/system_stm32l1xx.c ****       plldiv = RCC->CFGR & RCC_CFGR_PLLDIV;
 125              		.loc 1 231 0
 126 005a 154A     		ldr	r2, .L11
 127 005c 9168     		ldr	r1, [r2, #8]
 128              	.LVL13:
 232:Core/Src/system_stm32l1xx.c ****       pllmul = PLLMulTable[(pllmul >> 18)];
 129              		.loc 1 232 0
 130 005e 9368     		ldr	r3, [r2, #8]
 131              	.LVL14:
 233:Core/Src/system_stm32l1xx.c ****       plldiv = (plldiv >> 22) + 1;
 132              		.loc 1 233 0
 133 0060 C1F38341 		ubfx	r1, r1, #18, #4
 134              	.LVL15:
 135 0064 1748     		ldr	r0, .L11+20
 136 0066 415C     		ldrb	r1, [r0, r1]	@ zero_extendqisi2
 137              	.LVL16:
ARM GAS  /tmp/ccfBRp2i.s 			page 8


 234:Core/Src/system_stm32l1xx.c ****       
 138              		.loc 1 234 0
 139 0068 C3F38153 		ubfx	r3, r3, #22, #2
 140              	.LVL17:
 141 006c 0133     		adds	r3, r3, #1
 142              	.LVL18:
 236:Core/Src/system_stm32l1xx.c **** 
 143              		.loc 1 236 0
 144 006e 9268     		ldr	r2, [r2, #8]
 145              	.LVL19:
 238:Core/Src/system_stm32l1xx.c ****       {
 146              		.loc 1 238 0
 147 0070 12F4803F 		tst	r2, #65536
 148 0074 07D1     		bne	.L10
 241:Core/Src/system_stm32l1xx.c ****       }
 149              		.loc 1 241 0
 150 0076 114A     		ldr	r2, .L11+12
 151              	.LVL20:
 152 0078 02FB01F2 		mul	r2, r2, r1
 153 007c B2FBF3F3 		udiv	r3, r2, r3
 154              	.LVL21:
 155 0080 0C4A     		ldr	r2, .L11+4
 156 0082 1360     		str	r3, [r2]
 157 0084 D6E7     		b	.L9
 158              	.LVL22:
 159              	.L10:
 246:Core/Src/system_stm32l1xx.c ****       }
 160              		.loc 1 246 0
 161 0086 0E4A     		ldr	r2, .L11+16
 162              	.LVL23:
 163 0088 02FB01F2 		mul	r2, r2, r1
 164 008c B2FBF3F3 		udiv	r3, r2, r3
 165              	.LVL24:
 166 0090 084A     		ldr	r2, .L11+4
 167 0092 1360     		str	r3, [r2]
 168 0094 CEE7     		b	.L9
 169              	.LVL25:
 170              	.L3:
 250:Core/Src/system_stm32l1xx.c ****       SystemCoreClock = (32768 * (1 << (msirange + 1)));
 171              		.loc 1 250 0
 172 0096 064B     		ldr	r3, .L11
 173              	.LVL26:
 174 0098 5B68     		ldr	r3, [r3, #4]
 175 009a C3F34233 		ubfx	r3, r3, #13, #3
 176              	.LVL27:
 251:Core/Src/system_stm32l1xx.c ****       break;
 177              		.loc 1 251 0
 178 009e 0133     		adds	r3, r3, #1
 179              	.LVL28:
 180 00a0 4FF40042 		mov	r2, #32768
 181 00a4 02FA03F3 		lsl	r3, r2, r3
 182              	.LVL29:
 183 00a8 024A     		ldr	r2, .L11+4
 184 00aa 1360     		str	r3, [r2]
 252:Core/Src/system_stm32l1xx.c ****   }
 185              		.loc 1 252 0
 186 00ac C2E7     		b	.L9
ARM GAS  /tmp/ccfBRp2i.s 			page 9


 187              	.L12:
 188 00ae 00BF     		.align	2
 189              	.L11:
 190 00b0 00380240 		.word	1073887232
 191 00b4 00000000 		.word	.LANCHOR0
 192 00b8 00000000 		.word	.LANCHOR2
 193 00bc 0024F400 		.word	16000000
 194 00c0 00366E01 		.word	24000000
 195 00c4 00000000 		.word	.LANCHOR1
 196              		.cfi_endproc
 197              	.LFE73:
 199              		.global	APBPrescTable
 200              		.global	AHBPrescTable
 201              		.global	PLLMulTable
 202              		.global	SystemCoreClock
 203              		.section	.data.SystemCoreClock,"aw",%progbits
 204              		.align	2
 205              		.set	.LANCHOR0,. + 0
 208              	SystemCoreClock:
 209 0000 68FF1F00 		.word	2097000
 210              		.section	.rodata.AHBPrescTable,"a",%progbits
 211              		.align	2
 212              		.set	.LANCHOR2,. + 0
 215              	AHBPrescTable:
 216 0000 00       		.byte	0
 217 0001 00       		.byte	0
 218 0002 00       		.byte	0
 219 0003 00       		.byte	0
 220 0004 00       		.byte	0
 221 0005 00       		.byte	0
 222 0006 00       		.byte	0
 223 0007 00       		.byte	0
 224 0008 01       		.byte	1
 225 0009 02       		.byte	2
 226 000a 03       		.byte	3
 227 000b 04       		.byte	4
 228 000c 06       		.byte	6
 229 000d 07       		.byte	7
 230 000e 08       		.byte	8
 231 000f 09       		.byte	9
 232              		.section	.rodata.APBPrescTable,"a",%progbits
 233              		.align	2
 236              	APBPrescTable:
 237 0000 00       		.byte	0
 238 0001 00       		.byte	0
 239 0002 00       		.byte	0
 240 0003 00       		.byte	0
 241 0004 01       		.byte	1
 242 0005 02       		.byte	2
 243 0006 03       		.byte	3
 244 0007 04       		.byte	4
 245              		.section	.rodata.PLLMulTable,"a",%progbits
 246              		.align	2
 247              		.set	.LANCHOR1,. + 0
 250              	PLLMulTable:
 251 0000 03       		.byte	3
 252 0001 04       		.byte	4
ARM GAS  /tmp/ccfBRp2i.s 			page 10


 253 0002 06       		.byte	6
 254 0003 08       		.byte	8
 255 0004 0C       		.byte	12
 256 0005 10       		.byte	16
 257 0006 18       		.byte	24
 258 0007 20       		.byte	32
 259 0008 30       		.byte	48
 260              		.text
 261              	.Letext0:
 262              		.file 2 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/machine/_default_types.h"
 263              		.file 3 "/opt/gcc4mbed/gcc-arm-none-eabi/arm-none-eabi/include/sys/_stdint.h"
 264              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 265              		.file 5 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/system_stm32l1xx.h"
 266              		.file 6 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l152xe.h"
 267              		.file 7 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_hal.h"
ARM GAS  /tmp/ccfBRp2i.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 system_stm32l1xx.c
     /tmp/ccfBRp2i.s:16     .text.SystemInit:0000000000000000 $t
     /tmp/ccfBRp2i.s:23     .text.SystemInit:0000000000000000 SystemInit
     /tmp/ccfBRp2i.s:36     .text.SystemCoreClockUpdate:0000000000000000 $t
     /tmp/ccfBRp2i.s:43     .text.SystemCoreClockUpdate:0000000000000000 SystemCoreClockUpdate
     /tmp/ccfBRp2i.s:61     .text.SystemCoreClockUpdate:0000000000000010 $d
     /tmp/ccfBRp2i.s:190    .text.SystemCoreClockUpdate:00000000000000b0 $d
     /tmp/ccfBRp2i.s:236    .rodata.APBPrescTable:0000000000000000 APBPrescTable
     /tmp/ccfBRp2i.s:215    .rodata.AHBPrescTable:0000000000000000 AHBPrescTable
     /tmp/ccfBRp2i.s:250    .rodata.PLLMulTable:0000000000000000 PLLMulTable
     /tmp/ccfBRp2i.s:208    .data.SystemCoreClock:0000000000000000 SystemCoreClock
     /tmp/ccfBRp2i.s:204    .data.SystemCoreClock:0000000000000000 $d
     /tmp/ccfBRp2i.s:211    .rodata.AHBPrescTable:0000000000000000 $d
     /tmp/ccfBRp2i.s:233    .rodata.APBPrescTable:0000000000000000 $d
     /tmp/ccfBRp2i.s:246    .rodata.PLLMulTable:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
     /tmp/ccfBRp2i.s:74     .text.SystemCoreClockUpdate:000000000000001d $d
     /tmp/ccfBRp2i.s:74     .text.SystemCoreClockUpdate:000000000000001e $t

NO UNDEFINED SYMBOLS
